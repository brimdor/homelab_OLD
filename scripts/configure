#!/usr/bin/env python3

# Import necessary libraries
import fileinput
import subprocess
import sys
import json
from rich.prompt import Prompt

# Path to the configuration file
CONFIG_FILE = "scripts/config.json"

# Default patterns for find_and_replace
DEFAULT_PATTERNS = {
    "seed_repo": "https://github.com/khuedoan/homelab",
    "domain": "khuedoan.com",
    "timezone": "Asia/Ho_Chi_Minh",
    "loadbalancer_ip_range": "192.168.1.224/27",
    "control_plane_endpoint": "192.168.1.100",
    "terraform_organization": "khuedoan",
}

# Function to check the current Python version against a required version
def check_python_version(required_version: str) -> None:
    if sys.version_info < tuple(map(int, required_version.split('.'))):
        raise Exception(f"Must be using Python >= {required_version}")

# Function to load configuration from a JSON file
def load_config():
    try:
        with open(CONFIG_FILE, "r") as file:
            config = json.load(file)
            # Update default patterns with values from config.json
            for key in DEFAULT_PATTERNS:
                if key in config:
                    DEFAULT_PATTERNS[key] = config[key]
            return config
    except FileNotFoundError:
        return DEFAULT_PATTERNS.copy()

# Function to find and replace a pattern in specified files
import subprocess
from rich.prompt import Prompt

def find_and_replace(pattern: str, replacement: str, paths: list[str]) -> None:
    print(f"Looking for '{pattern}' to replace with '{replacement}' in {paths}")

    # Running git grep and capturing output
    git_grep_command = ["git", "grep", "--files-with-matches", pattern, "--"] + paths
    print(f"Executing command: {' '.join(git_grep_command)}")  # Verbose output

    process = subprocess.run(
        git_grep_command,
        capture_output=True,
        text=True
    )

    # Verbose output for debugging
    print("")
    print("Command output:", process.stdout)
    print("")
    print("Error (if any):", process.stderr)
    print("")

    # Check for specific Git error and prompt the user
    if "dubious ownership in repository" in process.stderr:
        current_dir = subprocess.run(["pwd"], capture_output=True, text=True).stdout.strip()
        print(f"Git has detected dubious ownership in the repository at '{current_dir}'.")
        user_decision = Prompt.ask("Would you like to automatically add this directory as a safe directory for Git? [Y/n]", default="Y")

        if user_decision.lower() == 'y':
            subprocess.run(["git", "config", "--global", "--add", "safe.directory", current_dir])
            print(f"Added '{current_dir}' as a safe directory in global Git configuration.")
        else:
            print("Please run the following command manually to resolve this issue:")
            print(f"\tgit config --global --add safe.directory {current_dir}")
            print("Exiting configuration script.")
            sys.exit(1)

        # Re-run the find and replace command after fixing the git issue
        process = subprocess.run(
            git_grep_command,
            capture_output=True,
            text=True
        )

    files_with_matches = process.stdout.splitlines()

    if not files_with_matches:
        print(f"No files found with the pattern '{pattern}'.")
        return

    for file_with_matches in files_with_matches:
        print(f"Updating file: {file_with_matches}")
        with fileinput.FileInput(file_with_matches, inplace=True) as file:
            for line in file:
                print(line.replace(pattern, replacement), end='')

# Function to load configuration from a JSON file
def load_config():
    try:
        with open(CONFIG_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {
            "seed_repo": "https://github.com/khuedoan/homelab",
            "domain": "khuedoan.com",
            "timezone": "Asia/Ho_Chi_Minh",
            "terraform_organization": "khuedoan",
            "loadbalancer_ip_range": "192.168.1.224/27",
            "control_plane_endpoint": "192.168.1.100",
            "storage_type": "cifs",
        }

# Function to save the configuration to a JSON file
def save_config(config):
    with open(CONFIG_FILE, "w") as file:
        json.dump(config, file, indent=4)

# Function to display the current configuration and options for editing
def display_menu(config, labels):
    print("\nCurrent Configuration. Choose one to edit or you can 'Edit all settings':")
    for index, key in enumerate(config.keys(), start=1):
        print(f"{index} - {labels[key]}: {config[key]}")
    print(f"{len(config) + 1} - Edit all settings")
    print("0 - Exit")

# Function to edit a specific setting in the configuration
def edit_setting(config, setting):
    new_value = Prompt.ask(f"Enter new value for {setting}", default=config[setting])
    config[setting] = new_value

# Main function of the script
def main():
    check_python_version(required_version='3.10.0')

    upstream_config = load_config()

    menu_labels = {
        "seed_repo": "Seed Repository",
        "domain": "Domain",
        "timezone": "Time Zone",
        "terraform_organization": "Terraform Organization",
        "loadbalancer_ip_range": "Loadbalancer IP Range",
        "control_plane_endpoint": "Control Plane Endpoint",
        "storage_type": "Storage Type (CIFS or NFS)",
    }

    while True:
        display_menu(upstream_config, menu_labels)
        choice = Prompt.ask("\nChoose an option to edit (or 0 to exit)", default="0")

        if choice == "0":
            print("Exiting...")
            break

        made_changes = False
        if choice.isdigit() and 1 <= int(choice) <= len(upstream_config):
            selected_key = list(upstream_config.keys())[int(choice) - 1]
            edit_setting(upstream_config, selected_key)
            made_changes = True
        elif choice == str(len(upstream_config) + 1):
            for key in upstream_config.keys():
                edit_setting(upstream_config, key)
            made_changes = True

        if made_changes:
            save_config(upstream_config)
            print("Configuration updated and saved.")
            print("Applying the updated configuration...")
            find_and_replace(
                pattern=DEFAULT_PATTERNS['seed_repo'],
                replacement=upstream_config['seed_repo'],
                paths=["bootstrap", "platform"]
            )
            find_and_replace(
                pattern=DEFAULT_PATTERNS['domain'],
                replacement=upstream_config['domain'],
                paths=[".ci", "apps", "bootstrap", "platform", "system", "external"]
            )
            find_and_replace(
                pattern=DEFAULT_PATTERNS['timezone'],
                replacement=upstream_config['timezone'],
                paths=["apps", "system", "metal"]
            )
            find_and_replace(
                pattern=DEFAULT_PATTERNS['loadbalancer_ip_range'],
                replacement=upstream_config['loadbalancer_ip_range'],
                paths=["metal/group_vars/all.yml", "external/main.tf",]
            )
            find_and_replace(
                pattern=DEFAULT_PATTERNS['control_plane_endpoint'],
                replacement=upstream_config['control_plane_endpoint'],
                paths=["metal"]
            )
            find_and_replace(
                pattern=DEFAULT_PATTERNS['terraform_organization'],
                replacement=upstream_config['terraform_organization'],
                paths=["external/versions.tf"]
            )
            if upstream_config['storage_type'] == 'nfs':
                print("Updating storage type to NFS...")
                find_and_replace(
                    pattern='#- nfs_utils',
                    replacement='- nfs_utils',
                    paths=["metal/cluster.yml"]
            )
            print("Configuration update process complete.")

# Entry point for the script
if __name__ == '__main__':
    main()
